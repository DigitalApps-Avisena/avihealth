def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1.1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.1'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33
    ndkVersion '21.3.6528147'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        debug {
            v1SigningEnabled true
            v2SigningEnabled true
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.avisena.flutter_avisena"
        minSdkVersion 29
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"

        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:multidex:1.0.3'  //with support libraries
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'

    // required to avoid crash on Android 12 API 31
    // Kotlin + coroutines
    implementation("androidx.work:work-runtime-ktx:2.7.1")
    // ADD THIS AT THE BOTTOM
    apply plugin: 'com.google.gms.google-services'
    // implementation 'com.google.firebase:firebase-messaging:7.0.3'
    constraints {
        implementation('com.google.android.gms:play-services-location') {
            version {
                strictly "16.0.0"
            }
            because 'location: 3.2.4 does not specify version & google.bintray.com answers 502 Bad Gateway'
        }
    }
    // error
    // implementation 'com.google.android.gms:play-services-basement:17.4.0'
    // Import the BoM for the Firebase platform
    // implementation platform('com.google.firebase:firebase-bom:26.0.0')

    // Declare the dependencies for the In-App Messaging and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    // implementation 'com.google.firebase:firebase-inappmessaging-display'
    // implementation 'com.google.firebase:firebase-analytics'
}
